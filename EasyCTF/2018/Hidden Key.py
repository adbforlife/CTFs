import math
import gmpy2
gmpy2.get_context().precision=1000000
from fractions import *
from binascii import *

def lcm(a, b):
    return a * b // gcd(a, b)

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

def rsaD(c, d, n):
    m = pow(c, d, n)
    result = format(m, 'x')
    if len(result) % 2 == 1:
        result = '0' + result
    return unhexlify(result)

def rsaPQ(c, p, q, e):
    n = p * q
    lambdaN = lcm(p - 1, q - 1)
    d = modinv(e, lambdaN)
    m = gmpy2.powmod(c, d, n)
    result = format(m, 'x')
    if len(result) % 2 == 1:
        result = '0' + result
    return unhexlify(result)


c = 19822919015216334606838147187844513303693151208933506237526243552791188358629927692564408308978667119010159015296389932255536038955462235588806834753957336725477679078308906619631832105515338709749280989968720700332965342664066727614684756288508336906873455402456724514409665063815883721368701414406637816503663069123152206187184332623963069223822592231181833565768221494006940826588467135926385229969814176675741364321794933093636886431505483774320087319252360432547660217288865770681157259876645827929973083604127379805176764472579255503056330078196468565478521112670467341060668527514751961549049873342692541606355
n = 31325016658297791169480146120150580664219873287421481080616514285705723444552690019413852971465151239826845324148227005504609963845765999280375945496745984700803995327426374755551653914842855856840873315380063944650694450432809712755761825613156119793152817878840392132906780617084024598234526140691477142470141549753066179951124472530113331326979879457581531345151803316432362920688290775743184527050943053649567601887797197755209287963264926465811140120495354841559998192053880422049607850758298738351886072262621692207202148055748922934409275716858927938602120378874645091397627068099133689377435543763129394494299
#p = 
#q = 
e = 65537
phi2d = 35906402511629257796873331657505713118658548928050971233624880390783608596696326954825632282869296602503506026224317700039936367304295793184619402438417258383719085966506311310962530256051162208791981402840855755528166814248646279836402945873499153624688740477810213128587258701444773118521965801623894073525113745206969653164649471755397819151217316846808139426381244899197410808004893311138089359750966674814512836216536006682471192475385232771846152596445095336059765670795032572594251794907179806180719654128026352708960205125585943113889680588589333301354560543641230664866892752046821466026179340210792546176562
phi = (phi2d * e - 2) // 2 // 37561
a = 1
b = n - phi + 1
p = -(-b + int(gmpy2.root(pow(b, 2) - 4 * a * n, 2))) // 2
q = n // p
print(p)
print(p * q - n)
print(rsaPQ(c, p, q, e))
