import math
from binascii import *

def gcd(a, b):
    m = max(a, b)
    n = min(a, b)
    while not m % n == 0:
        big = max(n, m - n)
        small = min(n, m - n)
        m = big
        n = small
    return n

def lcm(a, b):
    return a * b // gcd(a, b)

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

def seq_to_bits(seq):
    return [0 if b == '0' else 1 for b in seq]

#def bits_to_string(b):
#    return ''.join([bits_to_char(b[i:i + ASCII_BITS])
#        for i in range(0, len(b), ASCII_BITS)])

p = 61
q = 53
e = 17
c = 2790
n = p * q
lambdaN = lcm(p - 1, q - 1)
d = modinv(e, lambdaN)
m = pow(c, d, n)
print(m)

p = 416064700201658306196320137931
q = 590872612825179551336102196593
e = 17
c = 139040817866740560858426263669284695072532198513676512441913177536835765836166131810473794852321641027878109542698713013917202530302614357231411926138566114373412104176107031556103092924778978550485742292023320095672822900220861464411776569509624358059025102651988613813484132191345613673721355095708881089527634601992599005067968202810470528315133369512934860808176004329487370829277110192527824417015185575636167229403075774511639100271404015565910323166847809960588419672440131718597982087396297500641645480516659837126331012493771930933480710255618686073063875665188319497905005813055555607757687064735973157010014513767881671429111088323773987687304233692683432321669987061210706594620292744551644386639267786109794727411633870269488611560049128407436305801076451330110881032997512583436289874501473699998028084189853263086327834411044126188535202301579754711172549008536366070738273305149776870227335671099635377958086627903103499998733081943601031693147437677157380298486420541162100774308219753601078911889095536546967269624587207677963759613881252624988854489091952329435364006687026132460341995094454693283936656188830855211959461807625293506269434136797699111523167573195395488659307797055179990371926841140166159757120567004699125088395684010187030528
n = p * q
high = c
low = 0
guess = c // 2
while not guess ** 17 == c:
    if (guess ** 17 < c):
        low = guess
        guess = (high + guess) // 2
    else:
        high = guess
        guess = (low + guess) // 2
print(guess ** 17 == c)
h = hex(guess)[2:]
h = h[0:len(h) - 1]
print(unhexlify(h))

